Important list of questions to prepare for JavaScript interviews. 

🔍 What is event delegation, and how does it function in JavaScript?
🔍 Can you provide an illustration of how ES6 has altered the approach to working with "this" in JavaScript?
🔍 Explain the concept of prototypal inheritance.
🔍 Differentiate between a variable that is null, undefined, or undeclared.
🔍 Define what a closure is and describe its uses and advantages.
🔍 Explain the primary distinction between the Array.forEach() loop and Array.map() method, as well as when to choose one over the other.
🔍 What is a common scenario for employing anonymous functions?
🔍 Distinguish between host objects and native objects.
🔍Clarify the distinctions among 'function User(){}', 'var user = User()', and 'var user = new User()
🔍 Can you elucidate the purposes of Function.call and Function.apply, along with their notable differences?
🔍 Describe the Function.prototype.bind method.
🔍 Explain the differences between feature detection, feature inference, and utilizing the User Agent (UA) string.
🔍 Define the concept of "hoisting."
🔍 What is type coercion, and what are some common pitfalls associated with relying on it in JavaScript code?
🔍 Describe event bubbling and event capturing.
🔍 What distinguishes an "attribute" from a "property"?
🔍 List the advantages and disadvantages of extending built-in JavaScript objects.
🔍 Explain the differences between == and ===.
🔍 Discuss the same-origin policy's implications for JavaScript.
🔍 Why is it referred to as a "Ternary operator," and what does the term "Ternary" signify?
🔍 Define strict mode and outline some of its advantages and disadvantages.
🔍 Analyze the pros and cons of writing JavaScript code in a language that compiles to JavaScript.
🔍 What tools and techniques do you employ for debugging JavaScript code?
🔍 Enumerate the benefits and drawbacks of immutability and explain how you can achieve it in your code.
🔍 Differentiate between synchronous and asynchronous functions and elucidate the event loop.
🔍 Explain the disparities between variables created using let, var, or const.
🔍 Compare ES6 classes and ES5 function constructors, and furnish a use case for the arrow (=>) function syntax.
🔍 Describe the advantages of using the arrow syntax for methods in constructors.
🔍 Define a higher-order function and provide an example of object or array destructuring.
🔍 Give an example of generating a string using ES6 Template Literals and explain their benefits.
🔍 Provide an example of a curry function and clarify why this syntax can be advantageous.
🔍 Discuss the benefits of using spread syntax and differentiate it from rest syntax.
🔍 Explain how code sharing between files can be accomplished.
🔍 Define what a promise is and describe its applications.
🔍 Explore how Object-Oriented Programming (OOP) principles can be applied when coding in JavaScript.

1. basics of js (variables, hoisting of variables)
2. functions (arrow functions, higher order functions)
3. arrays and objects (array destructuring, object destructuring, rest operator, spread operator)
4. conditions in js (if else, ternary operator, using && ||, optional chaining
5. array methods (map, filter, reduce, sort)
6. event listeners (onclick, onblur, onchange, onfocus, settimeout, setinterval)
7. asynchronous events (callbacks, callback hell, promises and promise APIs)
8. aync await (alternative for promises)
9. try, catch (for error handling)
