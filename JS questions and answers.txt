Important list of questions to prepare for JavaScript interviews. 

üîç What is event delegation, and how does it function in JavaScript?
üîç Can you provide an illustration of how ES6 has altered the approach to working with "this" in JavaScript?
üîç Explain the concept of prototypal inheritance.
üîç Differentiate between a variable that is null, undefined, or undeclared.
üîç Define what a closure is and describe its uses and advantages.
üîç Explain the primary distinction between the Array.forEach() loop and Array.map() method, as well as when to choose one over the other.
üîç What is a common scenario for employing anonymous functions?
üîç Distinguish between host objects and native objects.
üîçClarify the distinctions among 'function User(){}', 'var user = User()', and 'var user = new User()
üîç Can you elucidate the purposes of Function.call and Function.apply, along with their notable differences?
üîç Describe the Function.prototype.bind method.
üîç Explain the differences between feature detection, feature inference, and utilizing the User Agent (UA) string.
üîç Define the concept of "hoisting."
üîç What is type coercion, and what are some common pitfalls associated with relying on it in JavaScript code?
üîç Describe event bubbling and event capturing.
üîç What distinguishes an "attribute" from a "property"?
üîç List the advantages and disadvantages of extending built-in JavaScript objects.
üîç Explain the differences between == and ===.
üîç Discuss the same-origin policy's implications for JavaScript.
üîç Why is it referred to as a "Ternary operator," and what does the term "Ternary" signify?
üîç Define strict mode and outline some of its advantages and disadvantages.
üîç Analyze the pros and cons of writing JavaScript code in a language that compiles to JavaScript.
üîç What tools and techniques do you employ for debugging JavaScript code?
üîç Enumerate the benefits and drawbacks of immutability and explain how you can achieve it in your code.
üîç Differentiate between synchronous and asynchronous functions and elucidate the event loop.
üîç Explain the disparities between variables created using let, var, or const.
üîç Compare ES6 classes and ES5 function constructors, and furnish a use case for the arrow (=>) function syntax.
üîç Describe the advantages of using the arrow syntax for methods in constructors.
üîç Define a higher-order function and provide an example of object or array destructuring.
üîç Give an example of generating a string using ES6 Template Literals and explain their benefits.
üîç Provide an example of a curry function and clarify why this syntax can be advantageous.
üîç Discuss the benefits of using spread syntax and differentiate it from rest syntax.
üîç Explain how code sharing between files can be accomplished.
üîç Define what a promise is and describe its applications.
üîç Explore how Object-Oriented Programming (OOP) principles can be applied when coding in JavaScript.

1. basics of js (variables, hoisting of variables)
2. functions (arrow functions, higher order functions)
3. arrays and objects (array destructuring, object destructuring, rest operator, spread operator)
4. conditions in js (if else, ternary operator, using && ||, optional chaining
5. array methods (map, filter, reduce, sort)
6. event listeners (onclick, onblur, onchange, onfocus, settimeout, setinterval)
7. asynchronous events (callbacks, callback hell, promises and promise APIs)
8. aync await (alternative for promises)
9. try, catch (for error handling)

- What are the different data types in JavaScript?
- How do you declare a variable in JavaScript?
- What is the difference between let, const, and var?
- How does hoisting work in JavaScript?
- What are closures in JavaScript?
- How do you use callbacks in JavaScript?
- What are Promises in JavaScript?
- How do you handle errors in JavaScript?
- How do you create and manipulate objects in JavaScript?
- What is the difference between == and === in JavaScript?
- What are the different types of Operators in JavaScript?
- What is the difference between null and undefined in JavaScript?
- How do you handle asynchronous code in JavaScript?
- What is the event loop in JavaScript?
- How do you use this keyword in JavaScript?
- What is the difference between call, apply, and bind methods in JavaScript?
- How do you create a class in JavaScript?
- What are arrow functions in JavaScript?   
- What is template literals in JavaScript?
- What are rest and spread operators in JavaScript?
- What is object destructuring in JavaScript?
- How do you handle date and time in JavaScript?
- How do you handle regular expressions in JavaScript?
- What are the different ways to create a function in JavaScript?
- What is the difference between synchronous and asynchronous code in JavaScript?
- What is the difference between let and var?
- What are the different types of loops in JavaScript?
- How do you break out of a loop in JavaScript?
- How do you handle multiple asynchronous requests in JavaScript?
- How do you check if a variable is an array in JavaScript?
- What are the different 3 types of scope and scope chain in JavaScript - global scope/ local or function scope/ block scope ?
- How do you use try and catch blocks in JavaScript?
- How do you create a new element in the DOM using JavaScript?
- What are the different types of events in JavaScript?
- How do you prevent default behavior in an event in JavaScript?
- What is NaN property in JavaScript?
- What is an Immediately Invoked Function in JavaScript?
- Explain Higher Order Functions in javascript?
- What is currying in JavaScript?
- What are object prototypes?
- What is recursion in a programming language?
- What is the use of a constructor function in javascript?
- In JavaScript, how many different methods can you make an object?
- What are classes in javascript?
- What are generator functions?
- Explain WeakMap in javascript?
- what is the diff between with map and forEach?
- what is the diff between let and var 
- What is a Temporal Dead Zone?
- Difference between Async/Await and Generators usage to achieve the same functionality.
- What are the primitive data types in JavaScript?
- What has to be done in order to put Lexical Scoping into practice?
- what is the diff between javascript and jquery?
- what is the dom?'
- what is the primitive and reference data types in javascript?


List of Questions Covered along with Code Snippets and
Explanations!
1. How to define a class with properties and methods in JavaScript?
2. How to implement class inheritance in JavaScript?
3. How to find duplicate elements in a given array?
4. How to find the count of duplicates in an array?
5. How to check if a given number is an integer?
6. Explain the difference between Object.freeze() vs const?
7. How to Sort a Number Array?
8. Sort a given array of strings
9. How to find unique values in an array?
10. How to find unique values from an Array in sorted order?
11. Find maximum value in a numbered array?
12. Find minimum value in a numbered array?
13. Find the average of the numbers in the numbered array?
14. How can you uppercase the first character in a string array?
15. How to make a sentence out of the given string array?
16. How to check if an array contains any element of another array?
17. Given two strings, how can you check if the strings are anagram for each other?
18. How can you extract a few fields from the given JSON object and form a new array?
19. Filter the given object based on certain conditions and return the corresponding
object?
20. Given an array of strings, reverse each word in the sentence?
21. How to check if an object is present in an Array or not?
22. How to empty an array?
23. What is IIFEs (Immediately Invoked Function Expressions)?
24. How do you sort and reverse an array without changing the original array?
25. Write a function to check if a given string is Palindrome or not?
26. How can you combine two Arrays into a third Array using spread operator?
27. How can you Insert an element at a specific index in an Array?
28. How can you Replace an element at a specific index in an Array?
29. How can you Delete an element at a specific index in an Array?
30. How can you delete a specific element?
31. How do you clone an Object?
32. How do you add an element at the beginning of an array?
33. How to remove an element from the end of the array?
34. How can you split a string into an Array?
35. How can you remove an element from the beginning of the array?
36. How can you add an element to an object?
37. How can you replace an existing element in an object?
38. How can you combine two objects?
39. How do you write a function which can take (x) number of parameters?
40. Convert the given number into the exact decimal points to the right side?
41. How do you return a character from a string at a specific index(2)?
42. How do you create an Array out of a given sentence?
43. How do you replace a given string in the string of arrays?
44. How do you write an add() function using javascript currying concept?
45. Implement a groupBy method in JavaScript?
46. Explain WeakSet in javascript with an example?
47. Explain WeakMap in javascript with an example?
48. Explain what is Object Destructuring with an example?
49. How can we generate a random alphanumeric string in JavaScript?
50. How can we call a function which logs a message after every 5 seconds?
51. How can we delay calling a function after 5 seconds?
52. Write a function that performs binary search on a sorted array?
53. How can we parse a given JSON object?
54. How do you check whether a string contains a substring?
55. How do I get query string values in javascript?
56. How to create and trigger events in javascript?
57. How to display the current date in javascript?
58. How do you compare time for two dates?
59. How do you check if a string starts with another string?
60. How do you remove whitespaces from a given string?
61. How do you assign default values to variables?
62. For a given function, count the number of parameters expected by a function?
63. Implement a method which generates 5 random numbers?
64. Implement a method which generates random numbers between 41 and 67 and sort
them reverse?
65. How do you search a string for a pattern?
66. How to write an Object and implement multiple function chaining?
67. How do you determine whether an object is frozen or not?
68. How do you determine two values are the same or not using an object?
69. How do you copy properties from one object to another object?
70. How do you determine if an object is sealed or not?
71. How do you get an enumerable key and value pairs?
72. What is the main difference between Object.values and Object.entries method?
73. How can you get the list of keys of any object?
74. How do you encode an URL?
75. How do you define property on an Object constructor?
76. How can you call the constructor of a parent class?
77. How do you check whether an object can be extendable or not?
78. How do you prevent an object from extending?
79. How do you find the Vowels?
80. What are default values in destructuring assignment?
81. How do you swap variables in destructuring assignment?
82. How do you combine two or more arrays?
83. How to create a specific number of copies for a string?
84. What is the easiest way to convert an array to an object?
85. Verify that a function argument is a Number or not?
86. What is the easiest way to resize an Array?
87. What's the difference between a function expression and function declaration?
88. How to detect a mobile device with JavaScript?
89. How to fill static values in an array?
90. Why do we use The some() method in Arrays?
91. How to add 15 minutes to a JavaScript Date?
92. Explain JavaScript Promises with an example?
93. Which keyword can be used to deploy inheritance in ES6?
94. What is the difference between for..of and for..in?
95. How to set a property in localStorage?
96. Give a list of the various ways using which an HTML element can be accessed within
a JavaScript code?
97. State the difference between Apply and Call?
98. What is the difference between undefined and not defined in JavaScript?
99. Explain Closure in JavaScript with an example?
100. How to calculate the length of an associative array using JavaScript?
101. Explain JavaScript promise.all with an example?
102. Explain Promise.race with an example?
103. Give an example of an Anonymous function?
104. What is Prototype Property? Explain with an Example.
105. Explain function hoisting with an example?
106. How to implement Bubble sort in JavaScript?
107. How to find prime numbers in an Array?
108. How to generate fibonacci series in JavaScript?

üöÄ Master Your Front-End Developer Interview with these 50 JavaScript Questions! üöÄ

1. What is the DOM?
2. Explain the differences between `null` and `undefined`.
3. How does the "strict mode" in JavaScript work?
4. What is the purpose of the `async` keyword?
5. Differentiate between synchronous and asynchronous code.
6. What is a callback function?
7. Explain the concept of "hoisting."
8. How does the "debouncing" of a function work?
9. What is the purpose of the `bind` method?
10. Describe the differences between cookies, sessionStorage, and localStorage.

11. How does CORS (Cross-Origin Resource Sharing) work?
12. What is the purpose of the `this` keyword in JavaScript?
13. Explain the differences between `==` and `===`.
14. How does the event delegation pattern work?
15. What is a closure, and how is it used?
16. How can you optimize website performance?
17. What is the difference between arrow functions and regular functions?
18. Describe the principles of responsive design.
19. Explain the concept of currying in JavaScript.
20. What is the role of the `use strict` directive?

21. How do you handle errors in JavaScript?
22. Explain the significance of the Document Object Model (DOM).
23. What is the purpose of the `map` function in JavaScript?
24. Differentiate between shallow and deep copying objects.
25. How does event bubbling work in the DOM?
26. Explain the concept of two-way data binding.
27. What is the role of a closure in JavaScript?
28. How can you optimize the loading time of a website?
29. What is the significance of the `async` and `await` keywords?
30. Describe the differences between local storage and session storage.

31. How does the "typeof" operator work in JavaScript?
32. Explain the principles of the Single Responsibility Principle (SRP) in software design.
33. What is the purpose of the `finally` block in a try-catch-finally statement?
34. How can you handle cross-browser compatibility issues?
35. What is the role of the `replace` method in strings?
36. How does the prototype chain work in JavaScript?
37. Describe the differences between REST and GraphQL.
38. What is the purpose of the `reduce` function in JavaScript?
39. Explain the concept of memoization.
40. How does the "box model" work in CSS?

41. What are web components, and how do they work?
42. Differentiate between call, apply, and bind methods.
43. How can you optimize images for the web?
44. Explain the purpose of the `defer` attribute in script tags.
45. What is the role of the `let` and `const` keywords in block scope?
46. Describe the differences between CSS Grid and Flexbox.
47. How do you handle asynchronous code in JavaScript?
48. Explain the purpose of the `Intersection Observer` API.
49. What are the benefits of using a CSS preprocessor like Sass?
50. How can you improve website accessibility?



Basics of Programming in JavaScript
Hello world program
Declare variable using var
More about variable
Let
Const
String Indexing
Useful string methods
Template Strings
Null, undefined, BigInt, typeof
Booleans and Comparison Operator *
Truthy and Falsy Values
If else statement
Ternary Operator
&& || operator
Nested if else
If elseif else
Switch statement
While loop 
While loop examples
For loop
For loop examples
Break and continue keyword
Do while loop
Arrays in JavaScript
Intro to arrays
Push pop shift unshift
Primitive vs reference data types
Clone array & spread operator
For loop
use const for creating arrays
While loop in array
For of loop
For in loop
Array destructuring
Nullish Coalescing

Objects in JavaScript
Intro to objects
Dot vs Bracket Notation
Iterate objects
Computed properties
Spread operator in objects
Object Destructuring
Objects inside Array
Nested Destructuring

Functions in JavaScript
Function declaration
Function Expression
Arrow Functions
Function declarations are hoisted  (covered in great detail , later in this course)
Function inside function
Lexical Scope
Block Scope Vs Function Scope
Default Parameters
Rest Parameters
Parameter Destructuring
Very brief intro to callback functions(covered in great detail , later in this course)
Functions returning Functions 

Very Important Array Methods
Foreach method
Map method
Filter
Reduce
Sort
Find
Every
Some
Fill method
Splice method

More useful things 
Iterables
Sets
Maps
Object.assign
Optional chaining Operator
Object Oriented JavaScript / Prototypal Inheritance
Methods
This keyword, Window object
Call , apply and bind method
Some warnings
This inside arrow functions
Short syntax for methods
Factory functions & discuss some memory related problems
First solution to that problem
Why that solution isn‚Äôt that great
What is _proto_ , [[prototype]]
What is prototype
Use prototype
New keyword
Constructor function with new keyword
More discussion about proto and prototype
Class keyword
Example using class keyword
Super keyword
Method overriding
Getters and setters
Static methods and properties

How JavaScript Works
Global Execution context
This and window in global execution context
Hoisting
Are let and const are hoisted ? What is a reference Error ? 
Function execution context
Scope chain and lexical environment
Intro to closures
Closure example 1
Closure Example 2
Closure Example 3

DOM Tutorial

HTML and CSS Crash course ( Around 30-40 minutes)
Async vs defer
Select elements using id
querySelector
textContent & innerText
Change the styles of elements using js
Get and set attributes
Select multiple elements and loop through them
innerHTML
Deeply understand dom tree, root node , element nodes, text nodes
classList
Add new elements to page
Create elements
Insert adjacent elements
Clone nodes
More methods to add elements on page
How to get the dimensions of the element
Intro to events
This keyword inside eventListener callback
Add events on multiple elements
Event object
How event listener works
Practice with events
Create demo project
More events
Event bubbling
Event Capturing
Event delegation 
Create Project using event delegation

Asynchronous JavaScript
Is Javascript a synchronous or asynchronous programming language ? 
SetTimeout()
SetTimeout() with 0 millisecond
Callback Queue
SetInterval and create little project with setInterval
Understand callbacks in general
Callbacks in asynchronous programming 
Callback Hell and Pyramid of doom
Intro to promises
Microtask Queue
Function that returns promise
Promise and settimeout
Promise.resolve and more about then method
Convert nested Callbacks to flat code using promises
Intro to Ajax, HTTP Request
XHR requests
Error handling in XHR requests
XHR request Chaining 
Promisifying XHR requests and chaining using then method
Fetch API
Error Handling in Fetch API
Consume Promises with async and Await
Split code into multiple files using ES6 modules.
Multiple Projects
Interview Questions
Web Performance
Testing

- What are the different data types In
JavaScript?
- How do you declare a variable In
JavaScript?
- What is the difference between let,
const, and var?
- How does hoisting work in JavaScript?
- What are closures In JavaScript?
- How do you use callbacks In JavaScript?
- What are Promises In JavaScript?
- How do you handle errors in JavaScript?
- How do you create and manipulate
objects in JavaScript?
- What is the difference between == and
=== |n JavaScript?
- What are the different types of operators
In JavaScript?
- What is the difference between null and
undefined in JavaScript?
- How do you handle asynchronous code In
JavaScript?
- What is the event loop in JavaScript?
- How do you use this keyword In
JavaScript?
- What is the difference between call,
apply, and bind methods in JavaScript?
- How do you create a class In JavaScript?
- What Is the difference between ESS and
Eso?
- What are arrow functions in JavaScript?
- What is template literals in JavaScript?
- What are rest and spread operators In JavaScript?
- What is destructuring in JavaScript?
- How do you handle date and time in
JavaScript?
- How do you handle regular expressions in
JavaScript?
- What are the different ways to create a
function in JavaScript?
- What is the difference between
synchronous and asynchronous code In JavaScript?
- What Is the difference between let and
var?
- What are the different types of loops in
JavaScript?
- How do you break out of a loop In JavaScript?
- How do you handle multiple
asynchronous requests in JavaScript?
- How do you check if a variable Is an array In JavaScript?
- What are the different types of scopes In JavaScript?
- How do you use try and catch blocks In JavaScript?
- How do you create a new element in the DOM using JavaScript?
- What are the different types of events In JavaScript?
- How do you prevent default behavior in an event In JavaScript?

1. What is JavaScript?
JavaScript is a high-level, interpreted programming language primarily used for
adding interactivity to web pages.
2. What are the data types in JavaScript?
JavaScript has six primitive data types: string, number, boolean, null, undefined, and
symbol, along with a complex data type called object.
3. What is the difference between null and undefined?
null represents the intentional absence of any object value, while undefined indicates
the absence of a value or an uninitialized variable.
4. What is the DOM in JavaScript?
The Document Object Model (DOM) is a programming interface that represents the
structure of HTML and XML documents. It allows JavaScript to access and manipulate
the content and structure of a webpage.
5. What is an event in JavaScript?
An event is an action or occurrence that happens in the browser, such as a button
click or page load. JavaScript can respond to these events by executing code in
response.
6. What is an anonymous function in JavaScript?
An anonymous function is a function without a name. It can be assigned to a
variable or passed as an argument to another function. They are often used for onetime or callback functions.
7. What are closures in JavaScript?
Closures are functions that have access to variables from an outer function, even
after the outer function has finished executing. They encapsulate data and provide a
way to maintain state between function calls.
8. What is the difference between == and === in JavaScript?
The == operator checks for equality after performing type coercion, while the ===
operator checks for equality without type coercion, ensuring both the value and type
match.
9. What is hoisting in JavaScript?
Hoisting is a JavaScript behavior where variable and function declarations are
moved to the top of their containing scope during the compilation phase, allowing
them to be used before they are declared.
10. What is the this keyword in JavaScript?
The this keyword refers to the object that is currently executing the code. Its value is
determined by how a function is called, and it provides a way to access object
properties and methods within a function.
11. What are the different ways to define a function in JavaScript?
Functions in JavaScript can be defined using function declarations, function
expressions, arrow functions, and methods within objects.
12. What is the purpose of the let keyword in JavaScript?
The let keyword is used to declare block-scoped variables in JavaScript. Variables
declared with let are only accessible within the block where they are defined.
13. What is the purpose of the const keyword in JavaScript?
The const keyword is used to declare block-scoped variables in JavaScript that
cannot be re-assigned. However, it does not make objects or arrays immutable.
14. What are template literals in JavaScript?
Template literals, denoted by backticks (`), are a way to create strings in JavaScript
that support interpolation of variables and multi-line strings.
15. What are JavaScript promises?
Promises are used for asynchronous programming in JavaScript. They represent the
eventual completion (or failure) of an asynchronous operation and allow chaining of
operations using .then() and .catch().
16. What is the async/await syntax in JavaScript?
The async/await syntax is a modern approach to handle asynchronous operations. It
allows writing asynchronous code in a more synchronous-like manner, making it
easier to read and maintain.
17. What are arrow functions in JavaScript?
Arrow functions are a concise syntax for defining functions in JavaScript. They have a
shorter syntax compared to traditional function expressions and inherit the this value
from the enclosing scope.
18. What is event delegation in JavaScript?
Event delegation is a technique where you attach an event listener to a parent
element instead of individual child elements. It allows handling events efficiently,
especially for dynamically added elements.
19. What is the purpose of the map() function in JavaScript?
The map() function is used to create a new array by applying a given function to
each element of an existing array. It allows transforming and manipulating array
elements easily.
20. What is the purpose of the filter() function in JavaScript?
The filter() function is used to create a new array containing elements that pass a
certain condition defined by a provided function. It allows filtering elements from an
array based on specific criteria.
21. What is the purpose of the reduce() function in JavaScript?
The reduce() function is used to reduce an array to a single value by applying a
function to each element and accumulating the result. It is often used to perform
calculations or transformations on arrays.
22. What is a callback function in JavaScript?
A callback function is a function that is passed as an argument to another function
and gets executed at a later time or in response to an event. It enables asynchronous
and event-driven programming.
23. What is the difference between let and var in JavaScript?
The let keyword declares block-scoped variables, while the var keyword declares
function-scoped variables. Variables declared with var are hoisted, while variables
declared with let are not.
24. What are JavaScript modules?
JavaScript modules are reusable pieces of code that encapsulate related
functionality. They allow for better organization, encapsulation, and code reuse in
larger JavaScript applications.
25. What is object destructuring in JavaScript?
Object destructuring is a feature that allows extracting properties from objects and
assigning them to variables. It provides a concise way to extract values and work
with object properties.
26. What are JavaScript classes?
JavaScript classes are a way to define objects with shared properties and behaviors.
They provide a template for creating multiple instances of objects with similar
characteristics.
27. What is inheritance in JavaScript?
Inheritance is a mechanism in JavaScript where an object can inherit properties and
methods from another object. It allows for code reuse and creating hierarchical
relationships between objects.
28. What are JavaScript getters and setters?
Getters and setters are special methods used to get and set the values of object
properties, respectively. They provide control over property access and enable data
validation and encapsulation.
29. What is the purpose of the try/catch statement in JavaScript?
The try/catch statement is used for error handling in JavaScript. It allows catching
and handling exceptions that occur during the execution of a block of code.
30. What is the difference between let and const in JavaScript?
The let keyword is used to declare variables that can be reassigned, while the const
keyword is used to declare variables that are read-only and cannot be reassigned.
31. What is the purpose of the forEach() function in JavaScript?
The forEach() function is used to execute a provided function once for each element
in an array. It provides an easy way to iterate over array elements and perform
operations on them.
32. What is the purpose of the localStorage object in JavaScript?
The localStorage object allows web applications to store key-value pairs locally
within the user's browser. It provides a simple way to store and retrieve data
persistently.
33. What are arrow functions? How are they different from regular functions?
Arrow functions are a concise syntax for defining functions in JavaScript. They have a
shorter syntax compared to regular functions and do not bind their own this value.
34. What is the purpose of the setTimeout() function in JavaScript?
The setTimeout() function is used to schedule the execution of a function after a
specified delay in milliseconds. It allows adding time-based delays to JavaScript
code.
35. What is event bubbling in JavaScript?
Event bubbling is a mechanism in which an event triggered on a specific element will
also trigger the same event on all of its parent elements. It starts from the innermost
element and propagates upwards in the DOM tree.
36. What is the purpose of the fetch() function in JavaScript?
The fetch() function is used to make HTTP requests and fetch resources from the
network. It provides a modern and flexible way to perform asynchronous network
requests.
37. What is the difference between null and undefined?
null is an explicitly assigned value that represents the absence of an object, while
undefined is a value assigned by the JavaScript engine to variables that have been
declared but have not been assigned a value.
38. What is event propagation in JavaScript?
Event propagation is the process of an event being triggered on an element and then
propagating to its parent elements or capturing down from its parent elements. It
allows handling events at different levels of the DOM hierarchy.
39. What is the purpose of the Object.keys() function in JavaScript?
The Object.keys() function is used to extract all the keys of an object and return them
as an array. It provides an easy way to iterate over an object's properties.
40. What is the difference between null and undefined in JavaScript?
null is an assigned value that represents the intentional absence of an object value,
while undefined represents an uninitialized or undefined value, often used as a
default initial value.
41. What is the purpose of the addEventListener() method in JavaScript?
The addEventListener() method is used to attach an event listener to an element. It
allows you to listen for specific events and execute a function when the event is
triggered.
42. What is the purpose of the parentNode property in JavaScript?
The parentNode property is used to access the parent node of an element in the
DOM. It allows traversal and manipulation of the DOM tree by accessing the
immediate parent of an element.
43. What is the purpose of the querySelector() method in JavaScript?
The querySelector() method is used to select the first element that matches a
specified CSS selector. It provides a powerful way to retrieve elements from the DOM
based on CSS selectors.
44. What is the purpose of the querySelectorAll() method in JavaScript?
The querySelectorAll() method is used to select all elements that match a specified
CSS selector. It returns a collection of elements that can be iterated over or accessed
using indexing.45. What is the difference between querySelector() and getElementById()?
querySelector() is a more versatile method that allows selecting elements based on
any CSS selector, while getElementById() is specifically used to select an element by
its unique id attribute.
46. What is the difference between function declarations and function expressions in
JavaScript?
Function declarations are hoisted and can be called before they are defined, while
function expressions are not hoisted and must be defined before they are called.
47. What is the purpose of the bind() method in JavaScript?
The bind() method is used to create a new function with a specified this value and
initial arguments. It allows explicit binding of the this value within a function.
48. What is the purpose of the call() method in JavaScript?
The call() method is used to invoke a function with a specified this value and
arguments provided individually. It allows borrowing methods from other objects
and explicit invocation of functions.
49. What is the purpose of the apply() method in JavaScript?
The apply() method is used to invoke a function with a specified this value and
arguments provided as an array or an array-like object. It allows borrowing methods
from other objects and explicit invocation of functions.
50. What is the purpose of the Array.isArray() method in JavaScript?
The Array.isArray() method is used to determine whether a given value is an array or
not. It returns true if the value is an array, and false otherwise.
51. What is event capturing in JavaScript?
Event capturing is the process of an event being triggered on an element's parent
elements first, before reaching the target element. It allows capturing events at the
outermost level of the DOM hierarchy.
52. What is event delegation in JavaScript?
Event delegation is a technique where you attach an event listener to a parent
element instead of individual child elements. It allows handling events efficiently,
especially for dynamically added elements.
53. What is the purpose of the startsWith() method in JavaScript?
The startsWith() method is used to check if a string starts with a specified substring.
It returns true if the string starts with the substring, and false otherwise.
54. What is the purpose of the endsWith() method in JavaScript?
The endsWith() method is used to check if a string ends with a specified substring. It
returns true if the string ends with the substring, and false otherwise.
55. What is the purpose of the includes() method in JavaScript?
The includes() method is used to check if a string contains a specified substring. It
returns true if the substring is found, and false otherwise.
56. What is the purpose of the padStart() method in JavaScript?
The padStart() method is used to pad the beginning of a string with a specified
character until it reaches a desired length. It is often used for formatting purposes.
57. What is the purpose of the padEnd() method in JavaScript?
The padEnd() method is used to pad the end of a string with a specified character
until it reaches a desired length. It is often used for formatting purposes.
58. What is the purpose of the charAt() method in JavaScript?
The charAt() method is used to retrieve the character at a specified index in a string.
It returns the character at the specified index or an empty string if the index is out of
range.
59. What is the purpose of the charCodeAt() method in JavaScript?
The charCodeAt() method is used to retrieve the Unicode value of the character at a
specified index in a string. It returns the Unicode value of the character or NaN if the
index is out of range.
60. What is the purpose of the String.fromCharCode() method in JavaScript?
The String.fromCharCode() method is used to create a string from a sequence of
Unicode values. It allows converting Unicode values to their corresponding
characters.
61. What is the purpose of the JSON.stringify() method in JavaScript?
The JSON.stringify() method is used to convert a JavaScript object or value to a JSON
string. It is commonly used for data serialization and communication with web
servers.
62. What is the purpose of the JSON.parse() method in JavaScript?
The JSON.parse() method is used to parse a JSON string and convert it into a
JavaScript object or value. It is commonly used to deserialize JSON data received
from a server.
63. What is the purpose of the encodeURIComponent() function in JavaScript?
The encodeURIComponent() function is used to encode special characters in a URL
component. It ensures that the component can be included in a URL without causing
any parsing errors.
64. What is the purpose of the decodeURIComponent() function in JavaScript?
The decodeURIComponent() function is used to decode URL-encoded components.
It converts URL-encoded characters back to their original form.
65. What is the purpose of the Math.random() function in JavaScript?
The Math.random() function is used to generate a random floating-point number
between 0 (inclusive) and 1 (exclusive). It is often used to introduce randomness in
JavaScript programs.
66. What is the purpose of the Math.floor() function in JavaScript?
The Math.floor() function is used to round a number down to the nearest integer. It
removes the decimal part of the number and returns the largest integer less than or
equal to the given number.
67. What is the purpose of the Math.ceil() function in JavaScript?
The Math.ceil() function is used to round a number up to the nearest integer. It
increases the number to the next higher integer, regardless of the decimal part.
68. What is the purpose of the Math.round() function in JavaScript?
The Math.round() function is used to round a number to the nearest integer. It rounds
the number up or down based on the decimal part.
69. What is the purpose of the Math.max() function in JavaScript?
The Math.max() function is used to find the largest number among a list of
arguments. It returns the highest value passed as an argument.
70. What is the purpose of the Math.min() function in JavaScript?
The Math.min() function is used to find the smallest number among a list of
arguments. It returns the lowest value passed as an argument.
71. What is the purpose of the Math.pow() function in JavaScript?
The Math.pow() function is used to calculate the power of a number. It takes a base
and an exponent as arguments and returns the result of raising the base to the
exponent.
72. What is the purpose of the Math.sqrt() function in JavaScript?
The Math.sqrt() function is used to calculate the square root of a number. It returns
the positive square root of the given number.
73. What is the purpose of the Math.abs() function in JavaScript?
The Math.abs() function is used to calculate the absolute value of a number. It
returns the magnitude of the number without considering its sign.
74. What is the purpose of the Math.floor() and Math.random() functions together?
By combining Math.floor() and Math.random() functions, you can generate a
random integer within a specified range. For example, Math.floor(Math.random() *
10) generates a random integer between 0 and 9.
75. What is the purpose of the Date() constructor in JavaScript?
The Date() constructor is used to create a new JavaScript Date object that
represents a specific date and time. It allows working with dates and performing
various operations on them.
76. What is the purpose of the getFullYear() method in JavaScript Date objects?
The getFullYear() method is used to retrieve the four-digit year value of a JavaScript
Date object. It returns the year as a four-digit number, such as 2023.
77. What is the purpose of the getMonth() method in JavaScript Date objects?
The getMonth() method is used to retrieve the month value of a JavaScript Date
object. It returns a zero-based index, where January is represented by 0 and
December by 11.
78. What is the purpose of the getDate() method in JavaScript Date objects?
The getDate() method is used to retrieve the day of the month value of a JavaScript
Date object. It returns the day as a number between 1 and 31.
79. What is the purpose of the getDay() method in JavaScript Date objects?
The getDay() method is used to retrieve the day of the week value of a JavaScript
Date object. It returns a zero-based index, where Sunday is represented by 0 and
Saturday by 6.
80. What is the purpose of the getHours() method in JavaScript Date objects?
The getHours() method is used to retrieve the hour value of a JavaScript Date object.
It returns the hour as a number between 0 and 23.
81. What is the purpose of the getMinutes() method in JavaScript Date objects?
The getMinutes() method is used to retrieve the minute value of a JavaScript Date
object. It returns the minute as a number between 0 and 59.
82. What is the purpose of the getSeconds() method in JavaScript Date objects?
The getSeconds() method is used to retrieve the second value of a JavaScript Date
object. It returns the second as a number between 0 and 59.
83. What is the purpose of the getFullYear() and getMonth() methods together in
JavaScript Date objects?
By combining the getFullYear() and getMonth() methods, you can retrieve the full
date in a human-readable format. For example, const currentDate = new Date();
const year = currentDate.getFullYear(); const month = currentDate.getMonth();
console.log(year + '-' + (month + 1)); will print the current year and month in the
format 'YYYY-MM'.
84. What is the purpose of the setFullYear() method in JavaScript Date objects?
The setFullYear() method is used to set the year value of a JavaScript Date object. It
allows modifying the year component of a date.
85. What is the purpose of the setMonth() method in JavaScript Date objects?
The setMonth() method is used to set the month value of a JavaScript Date object. It
allows modifying the month component of a date.
86. What is the purpose of the setDate() method in JavaScript Date objects?
The setDate() method is used to set the day of the month value of a JavaScript Date
object. It allows modifying the day component of a date.
87. What is the purpose of the setHours() method in JavaScript Date objects?
The setHours() method is used to set the hour value of a JavaScript Date object. It
allows modifying the hour component of a date.
88. What is the purpose of the setMinutes() method in JavaScript Date objects?
The setMinutes() method is used to set the minute value of a JavaScript Date object.
It allows modifying the minute component of a date.
89. What is the purpose of the setSeconds() method in JavaScript Date objects?
The setSeconds() method is used to set the second value of a JavaScript Date
object. It allows modifying the second component of a date.
90. What is the purpose of the toLocaleString() method in JavaScript Date objects?
The toLocaleString() method is used to convert a JavaScript Date object to a
localized string representation based on the current locale. It considers the user's
time zone and regional settings to format the date and time.
91. What is the purpose of the toDateString() method in JavaScript Date objects?
The toDateString() method is used to convert the date portion of a JavaScript Date
object to a human-readable string representation. It returns the date in the format
'Day Mon DD YYYY', such as 'Thu Jun 24 2023'.
92. What is the purpose of the getTime() method in JavaScript Date objects?
The getTime() method is used to retrieve the timestamp value of a JavaScript Date
object. It returns the number of milliseconds elapsed since January 1, 1970, 00:00:00
UTC.
93. What is the purpose of the setTime() method in JavaScript Date objects?
The setTime() method is used to set the timestamp value of a JavaScript Date
object. It allows modifying the date and time by providing a new timestamp.
94. What is the purpose of the setTimeout() function in JavaScript?
The setTimeout() function is used to execute a specified function or a piece of code
after a delay specified in milliseconds. It is commonly used for delaying the
execution of code or creating timeouts.
95. What is the purpose of the setInterval() function in JavaScript?
The setInterval() function is used to repeatedly execute a specified function or a
piece of code at a fixed interval specified in milliseconds. It is commonly used for
creating intervals and timers.
96. What is the purpose of the clearTimeout() function in JavaScript?
The clearTimeout() function is used to cancel a timeout set by the setTimeout()
function. It clears the scheduled execution of a function before it is triggered.
97. What is the purpose of the clearInterval() function in JavaScript?
The clearInterval() function is used to cancel an interval set by the setInterval()
function. It stops the repeated execution of a function at a fixed interval.
98. What is the purpose of the isNaN() function in JavaScript?
The isNaN() function is used to check if a value is NaN (Not-a-Number). It returns
true if the value is NaN, and false otherwise.
99. What is the purpose of the isFinite() function in JavaScript?
The isFinite() function is used to check if a value is a finite number. It returns true if
the value is a finite number, and false otherwise. It also returns false for NaN, Infinity,
and -Infinity.
100. What is the purpose of the parseFloat() function in JavaScript?
The parseFloat() function is used to parse a string and extract a floating-point
number from it. It converts the initial portion of the string that represents a valid
floating-point number into a number value.


// -----------------------------------------------------------
These are the most asked JavaScript interview questions I‚Äôve seen in the 12 years of my career. 
If you can correctly answer, you‚Äôre already 90% ahead of your competition. 
-What is the DOM (Document Object Model)?
-How does the "EventEmitter" class work in Node.js?
-What is the purpose of the "bind" method in JavaScript?
-Describe the purpose of the "Proxy" object in JavaScript.
-What is the purpose of the "spread" operator in JavaScript?
-What is the purpose of the "Symbol" data type in JavaScript?
-What is the purpose of the "use strict" directive in JavaScript?
-Discuss the concept of the "async/await" feature in JavaScript.
-Describe the differences between "=="" and "===" in JavaScript.
-Discuss the differences between the "call," "apply," and "bind" methods.
-Describe the role of the "fetch" API in making asynchronous HTTP requests.
-Discuss the role of the "webpack" module bundler in JavaScript development.
-Explain the differences between "shallow copy" and "deep copy" in JavaScript.
-What is the purpose of the "map," "reduce," and "filter" functions in JavaScript?
-Explain the differences between "document.onload" and "DOMContentLoaded."
-Describe the differences between "let," "const," and "var" for variable declaration
-What is the purpose of the "IIFE" (Immediately Invoked Function Expression) pattern?
-Explain the concept of the "Event Loop" and how it relates to asynchronous programming.
-Describe the differences between "mutable" and "immutable" data structures in JavaScript.
-Discuss the differences between "Cookies" and "Local Storage" for client-side data storage.
-Describe the differences between "call stack" and "callback queue" in the context of asynchronous JavaScript.
// -----------------------------------------------------------
Interview Question: 13. Whats the difference between var,let and const?
- Scope: 
var - variables declared with var are function scoped(available throughout the function where its declared) or global scope(if declared outside a function).
let and const - block scoped.
- Reassignment: 
var,let - variables declared with var and let can be reassigned. 
const - variables declared with const cannot be reassigned.
- Hoisting:
var - will be hoisted to the top of the scope and initialized with undefined.
let and const - will be hoisted to the top of the scope but will not be assigned any value.
// -----------------------------------------------------------
Essential Concepts for Every JS Developer
1Ô∏è‚É£ JavaScript Engines: Learn about the engines that execute JavaScript, such as V8 (used in Chrome).
2Ô∏è‚É£ Value Types and Reference Types: Understand the distinction between primitive types and objects.
3Ô∏è‚É£ Primitive Types: Know the fundamental data types like string, number, boolean, null, undefined.
4Ô∏è‚É£ Expression vs Statement: Distinguish between expressions and statements in JavaScript code.
5Ô∏è‚É£ Function Scope, Block Scope, and Lexical Scope: Grasp how scopes work in JavaScript.
6Ô∏è‚É£ Message Queue and Event Loop: Understand asynchronous JavaScript through the event loop.
7Ô∏è‚É£ setTimeout, setInterval, and requestAnimationFrame: Manage time-related operations effectively.
8Ô∏è‚É£ == vs === vs typeof: Differentiate between loose equality, strict equality, and the typeof operator.
9Ô∏è‚É£ Call Stack: Learn how the call stack manages function calls and execution flow.
üîü IIFE, Modules, and Namespaces: Organize and encapsulate code using Immediately Invoked Function Expressions and modularization.
1Ô∏è‚É£1Ô∏è‚É£ Bitwise Operators, Type Arrays, and Array Buffers: Handle binary data efficiently with low-level operations.
1Ô∏è‚É£2Ô∏è‚É£ DOM and Layout Trees: Understand the Document Object Model for web development.
1Ô∏è‚É£3Ô∏è‚É£ Factory Functions and Classes: Explore different approaches for creating objects.
1Ô∏è‚É£4Ô∏è‚É£ this, call, apply, and bind: Master context management and the 'this' keyword.
1Ô∏è‚É£5Ô∏è‚É£ new, Constructor, instanceof, and Instances: Grasp object instantiation and constructor functions.
1Ô∏è‚É£6Ô∏è‚É£ Prototypal Nature : Utilize prototype-based inheritance for code efficiency.
1Ô∏è‚É£7Ô∏è‚É£ Object.create and Object.assign: Learn to create and manipulate objects effectively.
1Ô∏è‚É£8Ô∏è‚É£ map, reduce, filter: Master array methods for functional programming.
1Ô∏è‚É£9Ô∏è‚É£ Pure Functions, Side Effects, State Mutation, and Event Propagation: Write clean and maintainable code.
2Ô∏è‚É£0Ô∏è‚É£ Closures: Manage variable scope and create modular code.
2Ô∏è‚É£1Ô∏è‚É£ High Order Functions: Use higher-order functions for concise and expressive code.
2Ô∏è‚É£2Ô∏è‚É£ Recursion: Solve problems efficiently with recursive functions.
2Ô∏è‚É£3Ô∏è‚É£ Collections and Generators: Understand data structures and generators for data manipulation.
2Ô∏è‚É£4Ô∏è‚É£ Asynchronous Operations: Handle asynchronous operations with callbacks, promise-based patterns and async/await .
2Ô∏è‚É£5Ô∏è‚É£Partial Applications, Currying, Compose, and Pipe: Explore functional programming concepts for code modularity.
2Ô∏è‚É£6Ô∏è‚É£ Data Structures & Algorithms: Explore various data structures for problem-solving.
2Ô∏è‚É£7Ô∏è‚É£ Inheritance, Polymorphism, and Code Reuse: Master object-oriented programming concepts for scalability.
2Ô∏è‚É£8Ô∏è‚É£ Design Patterns: Apply reusable solutions to common problems for improved code architecture.
2Ô∏è‚É£9Ô∏è‚É£ Clean Code: Prioritize writing clean and readable code following best practices for maintainability.
// -----------------------------------------------------------
Here are some random JavaScript fun factsüò±:
1. null is an object
2. NaN is a number
3. There was a time undefined could be redefined
4. Math.max() < Math.min()
5. Array.sort() sorts all arrays lexically
6. [] == false // -> true
7. undefined is not a function
8. "b" + "a" + + "a" + "a" === "baNaNa"
9. {} + [] // 0
10. [] + {} // "[object Object]"
11. [] + [] // ""
12. {} + {} // "[object Object][object Object]"
Know any other funny JS facts? Do Share them!
// -----------------------------------------------------------
Certainly! Here's a brief overview of some key JavaScript ES6 features:
ùüè-ùêÄùê´ùê´ùê®ùê∞ ùêÖùêÆùêßùêúùê≠ùê¢ùê®ùêßùê¨: Arrow functions provide a concise syntax for writing functions in JavaScript.
ùüê-ùêìùêûùê¶ùê©ùê•ùêöùê≠ùêû ùêãùê¢ùê≠ùêûùê´ùêöùê•ùê¨: Template literals enable the creation of dynamic strings with embedded expressions.
ùüë-ùêãùêûùê≠ ùêöùêßùêù ùêÇùê®ùêßùê¨ùê≠ ùêÉùêûùêúùê•ùêöùê´ùêöùê≠ùê¢ùê®ùêßùê¨: ES6 introduced the let and const keywords for block-scoped variable declarations.
ùüí-ùêÉùêûùê¨ùê≠ùê´ùêÆùêúùê≠ùêÆùê´ùê¢ùêßùê† ùêÄùê¨ùê¨ùê¢ùê†ùêßùê¶ùêûùêßùê≠: Destructuring assignment allows you to extract values from arrays or objects into distinct variables.
ùüì-ùêíùê©ùê´ùêûùêöùêù ùêöùêßùêù ùêëùêûùê¨ùê≠ ùêéùê©ùêûùê´ùêöùê≠ùê®ùê´ùê¨: The spread operator (...) is used to spread elements of an array or object, while the rest operator gathers them.
ùüî-ùêÉùêûùêüùêöùêÆùê•ùê≠ ùêèùêöùê´ùêöùê¶ùêûùê≠ùêûùê´ùê¨:
ES6 enables the use of default parameter values in function declarations.
These features enhance the readability, flexibility, and conciseness of JavaScript code, offering developers powerful tools for modern web development.
// -----------------------------------------------------------
// Event Delegation in JavaScript

// const { stdChannel } = require("redux-saga");

// Temporal Dead Zone (TDZ) and Hoisting in JavaScript ‚Äì Explained with Examples

// opeartors => assignment / comparison / logical / conditional / bitwise / unary / typeof / precedence

// conditional statement => if / if else / switch 

// looop statement => while / do while / for loop / nested for loops / for in loop / for of loop / break / continue 

// function => What is a function in JavaScript?
// How to call a function in JavaScript using arguments?
// Pass By Value in JavaScript
// Function return (or return statement)
// Nested functions
// Rest parameter
// Anonymous functions
// Recursion
// Arrow Function

// objects => 
// What is an Object?
// Types of Objects
// Array Object
// Properties of Array Object
// Methods of Array Object
// String Object
// Properties of String Object
// Methods of String Object
// Math Object
// Properties of Math Object
// Methods of Math Object
// Date Object
// Methods of Date Object
// Global Object
// Properties of Global Object
// Methods of Global Object
// Number Object
// Properties of Number Object
// Methods of Number Object
// Creating your own Objects
// Defining methods

// window and frame objects 
// Top-level Objects
// Window Object
// Creating a Window
// Communicating with the user
// Working with Timeouts
// Some properties of Window Object
// Some other useful methods of Window Object
// Location Object
// Properties of Location Object
// Methods of Location Object
// Document Object
// Properties of Document Object
// Methods of Document Object
// The Navigator Object
// Properties of Navigator Object
// Methods of Navigator Object
// History Object
// Properties of History Object
// Methods of History Object
// Screen Object
// Working with Frames
// Creating frames
// The frame tree
// Accessing frames
// Nested frames
// Frame object model
// Frame element object

// event handling
// Events
// How does it work?
// Objects and Events
// Creating an Event handler
// Changing Event handlers
// Managing JavaScript Events
// Mouse Events
// Keyboard Events
// The onLoad and onUnload Events
// Event Simulation
// The Event object
// Event capturing
// Turning off Event capturing
// Event bubbling
// Preventing Event bubbling

// Exception Handling
// Exceptions and Errors
// Exception mechanism
// ‚Äútry-catch-finally‚Äù constructions
// Throwing exceptions
// Error Object
// Properties of Error Object
// Methods of Error Object

// form
// The Form Object
// Accessing Forms within JavaScript
// Accessing Form elements
// About <input> element objects
// Properties of Form Object
// Methods of Form Object
// Fieldset and Legend Element Objects
// Label Element Object
// Text Input Object
// Properties of Text Input Object
// Methods of Text Input Object
// Password Input Object
// Hidden Input Object
// Textarea Element Object
// Properties of Textarea Element Object
// Button Element Object
// Checkbox Input Object
// Properties of Checkbox Input Object
// Method of Checkbox Input Object
// Radio Input Object
// Properties of Radio Input Object
// Methods of Radio Input Object
// Image Input Object
// Properties of Image Input Object
// Select Element Object
// Properties of Select Element Object
// Methods of Select Element Object
// Option Element Object
// File Input Element Object

// document object model 
// Document Object Model (DOM) and W3C
// DOM Levels
// DOM and JavaScript
// New DOM Concepts
// Element Referencing
// Hierarchy of nodes
// Node properties
// Node methods
// Generating new node content
// Replacing node content

// Throttling vs denouncing
// ‚Ä¢html5 features
// ‚Ä¢Js- Async & await
// ‚Ä¢webpack
// ‚Ä¢current project related question
// ‚Ä¢on code to solve- Create a webpage with API ( React.js )
// ‚Ä¢What are PROMISES,ASYNC &  AWAIT
// ‚Ä¢CLOSURES
// ‚Ä¢HOISTING
// ‚Ä¢one code to solve
// ‚Ä¢Difference between functional & class based component of react
// ‚Ä¢life cycle method of redux and react
// ‚Ä¢USE EFFECT-MOUNTING UNMOUNTING AND UPDATING
// ‚Ä¢what is web pack?
// ‚Ä¢how to optimize the web page?
// ‚Ä¢what is deep copy & shallow copy ?
// ‚Ä¢react life cycle
// ‚Ä¢hooks -use effect and state hook
// ‚Ä¢MOUNTING UNMOUNTING
// ‚Ä¢ask to design code
// ‚Ä¢Ues of this,Promise, hooks,use state,css,html5,constructor,ES6
// ‚Ä¢Scss,webpack
// ‚Ä¢css box-model.
// ‚Ä¢How to optimize multiple svgs
// ‚Ä¢Optimising fonts loads
// ‚Ä¢Optimize CSS for multiple (as in 100s) sites using similar css
// ‚Ä¢Object Oriented CSS
// ‚Ä¢Web security
// ‚Ä¢Graphql and rest API
// ‚Ä¢How to query graphql from FE side
// ‚Ä¢Oauth integration
// ‚Ä¢Web pack
// ‚Ä¢const obj={a:1,b:{c:3,d:[10]}} , extract a,b values from this
// const arr=[{id:1,status:1},{id:2,status:2},{id:3,status:1}]
// Ans :[{id:1,status:1},
// ‚Ä¢{id:3,status:1}]]
// ‚Ä¢https://onecompiler.com/javascript/3wyx24ssq
// ‚Ä¢ES6 Practice - JavaScript - OneCompiler
// ‚Ä¢const obj={a:1,c:{d:1}};
// const obj={a:1,c:{ arr:[1,2,3,4] }};
// const obj=[{id:1},{id:2},{id:3},{id:2}];
// ‚Ä¢ES6 features
// ‚Ä¢Vanilla Javascript
// ‚Ä¢design HTML in vanilla js fetch API data populate the data only using acodian element of html.
// ‚Ä¢Class component vs Function component
// ‚Ä¢React Memo
// ‚Ä¢Use Memo Vs use call back
// ‚Ä¢Css flexbox and grid
// ‚Ä¢Flex box properties
// ‚Ä¢ALL THE PROPERTIES OF SASS
// ‚Ä¢USE EFFECT-MOUNTING UNMOUNTING AND UPDATING
// PROMISES
// ‚Ä¢how to create a images using ‚Ä¢Java script
// ‚Ä¢How to add styling using JS
// ‚Ä¢how to create mixin in saas
// ‚Ä¢declaring a variable in CSS
// -----------------------------------------------------------
The JavaScript Tree:
|
|‚îÄ‚îÄ Variables
| ‚îú‚îÄ‚îÄ var
| ‚îú‚îÄ‚îÄ let
| ‚îî‚îÄ‚îÄ const
|
|‚îÄ‚îÄ Data Types
| ‚îú‚îÄ‚îÄ String
| ‚îú‚îÄ‚îÄ Number
| ‚îú‚îÄ‚îÄ Boolean
| ‚îú‚îÄ‚îÄ Object
| ‚îú‚îÄ‚îÄ Array
| ‚îú‚îÄ‚îÄ Null
| ‚îî‚îÄ‚îÄ Undefined
|
|‚îÄ‚îÄ Operators
| ‚îú‚îÄ‚îÄ Arithmetic
| ‚îú‚îÄ‚îÄ Assignment
| ‚îú‚îÄ‚îÄ Comparison
| ‚îú‚îÄ‚îÄ Logical
| ‚îú‚îÄ‚îÄ Unary
| ‚îî‚îÄ‚îÄ Ternary (Conditional)
|
|‚îÄ‚îÄ Control Flow
| ‚îú‚îÄ‚îÄ if statement
| ‚îú‚îÄ‚îÄ else statement
| ‚îú‚îÄ‚îÄ else if statement
| ‚îú‚îÄ‚îÄ switch statement
| ‚îú‚îÄ‚îÄ for loop
| ‚îú‚îÄ‚îÄ while loop
| ‚îî‚îÄ‚îÄ do-while loop
|
|‚îÄ‚îÄ Functions
| ‚îú‚îÄ‚îÄ Function declaration
| ‚îú‚îÄ‚îÄ Function expression
| ‚îú‚îÄ‚îÄ Arrow function
| ‚îî‚îÄ‚îÄ IIFE (Immediately Invoked Function Expression)
|
|‚îÄ‚îÄ Scope
| ‚îú‚îÄ‚îÄ Global scope
| ‚îú‚îÄ‚îÄ Local scope
| ‚îú‚îÄ‚îÄ Block scope
| ‚îî‚îÄ‚îÄ Lexical scope
|
|‚îÄ‚îÄ Arrays
| ‚îú‚îÄ‚îÄ Array methods
| | ‚îú‚îÄ‚îÄ push()
| | ‚îú‚îÄ‚îÄ pop()
| | ‚îú‚îÄ‚îÄ shift()
| | ‚îú‚îÄ‚îÄ unshift()
| | ‚îú‚îÄ‚îÄ splice()
| | ‚îú‚îÄ‚îÄ slice()
| | ‚îî‚îÄ‚îÄ concat()
| ‚îî‚îÄ‚îÄ Array iteration
| ‚îú‚îÄ‚îÄ forEach()
| ‚îú‚îÄ‚îÄ map()
| ‚îú‚îÄ‚îÄ filter()
| ‚îî‚îÄ‚îÄ reduce()
|
|‚îÄ‚îÄ Objects
| ‚îú‚îÄ‚îÄ Object properties
| | ‚îú‚îÄ‚îÄ Dot notation
| | ‚îî‚îÄ‚îÄ Bracket notation
| ‚îú‚îÄ‚îÄ Object methods
| | ‚îú‚îÄ‚îÄ Object.keys()
| | ‚îú‚îÄ‚îÄ Object.values()
| | ‚îî‚îÄ‚îÄ Object.entries()
| ‚îî‚îÄ‚îÄ Object destructuring
|
|‚îÄ‚îÄ Promises
| ‚îú‚îÄ‚îÄ Promise states
| | ‚îú‚îÄ‚îÄ Pending
| | ‚îú‚îÄ‚îÄ Fulfilled
| | ‚îî‚îÄ‚îÄ Rejected
| ‚îú‚îÄ‚îÄ Promise methods
| | ‚îú‚îÄ‚îÄ then()
| | ‚îú‚îÄ‚îÄ catch()
| | ‚îî‚îÄ‚îÄ finally()
| ‚îî‚îÄ‚îÄ Promise.all()
|
|‚îÄ‚îÄ Asynchronous JavaScript
| ‚îú‚îÄ‚îÄ Callbacks
| ‚îú‚îÄ‚îÄ Promises
| ‚îî‚îÄ‚îÄ Async/Await
|
|‚îÄ‚îÄ Error Handling
| ‚îú‚îÄ‚îÄ try...catch statement
| ‚îî‚îÄ‚îÄ throw statement
|
|‚îÄ‚îÄ JSON (JavaScript Object Notation)
|
|‚îÄ‚îÄ Modules
| ‚îú‚îÄ‚îÄ import
| ‚îî‚îÄ‚îÄ export
|
|‚îÄ‚îÄ DOM Manipulation
| ‚îú‚îÄ‚îÄ Selecting elements
| ‚îú‚îÄ‚îÄ Modifying elements
| ‚îî‚îÄ‚îÄ Creating elements
|
|‚îÄ‚îÄ Events
| ‚îú‚îÄ‚îÄ Event listeners
| ‚îú‚îÄ‚îÄ Event propagation
| ‚îî‚îÄ‚îÄ Event delegation
|
|‚îÄ‚îÄ AJAX (Asynchronous JavaScript and XML)
|
|‚îÄ‚îÄ Fetch API
|
|‚îÄ‚îÄ ES6+ Features
| ‚îú‚îÄ‚îÄ Template literals
| ‚îú‚îÄ‚îÄ Destructuring assignment
| ‚îú‚îÄ‚îÄ Spread/rest operator
| ‚îú‚îÄ‚îÄ Arrow functions
| ‚îú‚îÄ‚îÄ Classes
| ‚îú‚îÄ‚îÄ let and const
| ‚îú‚îÄ‚îÄ Default parameters
| ‚îú‚îÄ‚îÄ Modules
| ‚îî‚îÄ‚îÄ Promises
|
|‚îÄ‚îÄ Web APIs
| ‚îú‚îÄ‚îÄ Local Storage
| ‚îú‚îÄ‚îÄ Session Storage
| ‚îî‚îÄ‚îÄ Web Storage API
|
|‚îÄ‚îÄ Libraries and Frameworks
| ‚îú‚îÄ‚îÄ React
| ‚îú‚îÄ‚îÄ Angular
| ‚îî‚îÄ‚îÄ Vue.js
|
|‚îÄ‚îÄ Debugging
| ‚îú‚îÄ‚îÄ Console.log()
| ‚îú‚îÄ‚îÄ Breakpoints
| ‚îî‚îÄ‚îÄ DevTools
|
|‚îÄ‚îÄ Others
| ‚îú‚îÄ‚îÄ Closures
| ‚îú‚îÄ‚îÄ Callbacks
| ‚îú‚îÄ‚îÄ Prototypes
| ‚îú‚îÄ‚îÄ this keyword
| ‚îú‚îÄ‚îÄ Hoisting
| ‚îî‚îÄ‚îÄ Strict mode
|
|____________ END __________________

// -----------------------------------------------------------
which operator is used for strict equality
====
// -----------------------------------------------------------
What is the difference between map() and filter() in javascript ?
Both map and filter are useful methods when working with arrays in javascript.
Map() will transform each element of an array and creates a new array which contains the transformed elements. Whereas., filter() will creates a new array with only those elements which satisfies the specified condition.
// -----------------------------------------------------------
ùêäùê¢ùê•ùê•ùêûùê´ ùêìùê®ùê®ùê•ùê¨ ùêÖùê®ùê´ ùêÖùê´ùê®ùêßùê≠ùêûùêßùêù ùêÉùêûùêØùêûùê•ùê®ùê©ùêûùê´ üßë‚Äçüíª
Here is the top list ‚¨áÔ∏è
01. Get Pixel Snap
02. Code to Go
03. Unused CSS
04. Responsively
05. Web Gradients
06. Spline
07. Shape Divider
08. Get Waves
09. Blob Maker
10. Animista
11. Lorem Ipsum
12. Google Fonts
13. Landing Page
14. Museum of Websites
// -----------------------------------------------------------
We hardly get chanceüôÉ to build project from scratch in our organization.
But trustüòâ me if you get the chance ,the learning curve is good that I won't be explaining, whoever here as done it will know it.
There are so many things,tools to choose from .some of the things like 
Folder structure 
Ui libraries or own design system Plain react or next js or Preact Linters Prettier Typescript or javascript ü§û
 TDD to follow or for later üòÇ Redux /Recoil /zod 
Api fetching libraries React query or go with redux toolkit only camelCase component and so on
what's your take on this
i basically start with bare minimum setup and mostly focus on scalable folder üìÇ structure and keep on adding as per the requirement comes .
will write a detailed blog on this.
// -----------------------------------------------------------
What are the differences between map and forEach in javascript ?
map method is used to transform the elements of an array whereas forEach method is used to loop through the elements of an array.
map method will return a new array with the transformed values whereas forEach method will not return a new array.
map method can be used with other array methods like filter. whereas forEach method cannot be used with other array methods as it does not return an array.
// -----------------------------------------------------------
Frontend System Design - Short Polling in #react üöÄüî•
Short polling is a simpler form of asynchronous communication, where the client sends periodic requests to the server at fixed intervals, checking for updates. This method is less efficient compared to long polling, as it often results in frequent unnecessary requests. Even if no new data is available, the client continues to send requests, potentially causing an increase in network traffic and server load.
In React, you can achieve short polling by using setInterval to repeatedly make API requests at regular intervals.
Upcoming Post on Long Polling with an exampleüî•
// -----------------------------------------------------------
how do you check if a variable is an array 
Array.isArray(x)
// -----------------------------------------------------------
creating dom manipulation
- document.createElement('like that div,ul,li,p,h1,h2,h3,h4,h5,h6')
- .appendChild()
- removeChild()
- remove()
- document.querySelector('#elementID')
- document.querySelectorAll('#elementID')
- element.style.fontSize = '10px'
- element.id = 'myId'
- element.classList.add('myClass')
- element.classList.remove('myClass')
- element.innerText = 'hello'
- element.textContent = 'happy coding'
- element.setAttribute(attribute,value)
- element.removeAttribute(attribute)
// -----------------------------------------------------------